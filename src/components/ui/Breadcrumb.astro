---
export interface Props {
    items?: Array<{
        label?: string;
        href?: string;
        name?: string;  // Support pour l'ancien format
        url?: string;   // Support pour l'ancien format
    }>;
    autoGenerate?: boolean;
    separator?: string;
    showHome?: boolean;
    currentPageTitle?: string;
}

const {
    items = [],
    autoGenerate = true,
    separator = '/',
    showHome = true,
    currentPageTitle
} = Astro.props;

// Normaliser les items pour supporter les deux formats (label/href et name/url)
const normalizedItems = items.map(item => ({
    label: item.label || item.name || '',
    href: item.href || item.url
}));

// Fonction pour g√©n√©rer automatiquement les breadcrumbs bas√©s sur l'URL
function generateBreadcrumbs(url: URL, currentTitle?: string) {
    const pathSegments = url.pathname.split('/').filter(segment => segment !== '');
    const breadcrumbs = [];

    // Toujours inclure l'accueil si demand√©
    if (showHome) {
        breadcrumbs.push({ label: 'Accueil', href: '/' });
    }

    // Mapper les segments d'URL vers des labels plus lisibles
    const segmentMap: Record<string, string> = {
        'produits': 'Produits',
        'albums': 'Albums',
        'evenements': '√âv√©nements',
        'concerts': 'Concerts',
        'videos': 'Vid√©os',
        'blog': 'Blog',
        'contact': 'Contact',
        'panier': 'Panier',
        'commande': 'Commande',
        'mon-compte': 'Mon Compte',
        'recherche': 'Recherche'
    };

    // Construire le chemin progressivement
    let currentPath = '';
    pathSegments.forEach((segment, index) => {
        currentPath += `/${segment}`;

        // Ne pas cr√©er de lien pour le dernier segment (page actuelle)
        const isLast = index === pathSegments.length - 1;
        const label = segmentMap[segment] || segment.charAt(0).toUpperCase() + segment.slice(1);

        breadcrumbs.push({
            label: isLast && currentTitle ? currentTitle : label,
            href: isLast ? undefined : currentPath
        });
    });

    return breadcrumbs;
}

// Utiliser les items fournis ou g√©n√©rer automatiquement
const breadcrumbItems = normalizedItems.length > 0 ? normalizedItems : (autoGenerate ? generateBreadcrumbs(Astro.url, currentPageTitle) : []);

// Ne rien afficher si pas de breadcrumbs
if (breadcrumbItems.length === 0) {
    return null;
}
---

<nav class="breadcrumb" aria-label="Fil d'Ariane">
    <div class="container">
        <ol class="breadcrumb-list">
            {breadcrumbItems.map((item, index) => (
                <li class="breadcrumb-item">
                    {item.href ? (
                        <a href={item.href} class="breadcrumb-link">
                            {item.label}
                        </a>
                    ) : (
                        <span class="breadcrumb-current" aria-current="page">
                            {item.label}
                        </span>
                    )}
                    {index < breadcrumbItems.length - 1 && (
                        <span class="breadcrumb-separator" aria-hidden="true">
                            {separator}
                        </span>
                    )}
                </li>
            ))}
        </ol>
    </div>
</nav>

<style>
    .breadcrumb {
        background: var(--light-gray);
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        padding: 1rem 0;
        padding-top: var(--header-height-desktop); /* Le padding-top remplace margin-top */
        margin-top: 0;
        margin-bottom: 0;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .breadcrumb-list {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        list-style: none;
        margin: 0;
        padding: 0;
        font-size: 0.9rem;
    }

    .breadcrumb-item {
        display: flex;
        align-items: center;
    }

    .breadcrumb-link {
        color: var(--gray);
        text-decoration: none;
        transition: color 0.3s ease;
        font-weight: 500;
    }

    .breadcrumb-link:hover {
        color: var(--primary-yellow);
        text-decoration: underline;
    }

    .breadcrumb-current {
        color: var(--black);
        font-weight: 600;
    }

    .breadcrumb-separator {
        margin: 0 0.8rem;
        color: var(--gray);
        font-weight: 300;
        user-select: none;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .breadcrumb {
            padding: 0.7rem 0;
            padding-top: var(--header-height-mobile); /* Le padding-top remplace margin-top */
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .breadcrumb::-webkit-scrollbar {
            height: 3px;
        }

        .breadcrumb::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.05);
        }

        .breadcrumb::-webkit-scrollbar-thumb {
            background: var(--primary-yellow);
            border-radius: 3px;
        }

        .container {
            padding: 0 15px;
        }

        .breadcrumb-list {
            font-size: 0.85rem;
            flex-wrap: nowrap;
            white-space: nowrap;
        }

        .breadcrumb-item {
            flex-shrink: 0;
        }

        .breadcrumb-separator {
            margin: 0 0.5rem;
        }

        .breadcrumb-link,
        .breadcrumb-current {
            display: inline-block;
        }
    }

    @media (max-width: 480px) {
        .breadcrumb {
            padding: 0.5rem 0;
            padding-top: var(--header-height-mobile); /* Le padding-top remplace margin-top */
        }

        .container {
            padding: 0 10px;
        }

        .breadcrumb-list {
            font-size: 0.8rem;
            gap: 0;
        }

        .breadcrumb-separator {
            margin: 0 0.4rem;
            font-size: 0.7rem;
        }

        .breadcrumb-link,
        .breadcrumb-current {
            padding: 0.2rem 0;
        }

        /* Masquer "Accueil" et ne montrer qu'une fl√®che sur tr√®s petit √©cran */
        .breadcrumb-item:first-child .breadcrumb-link {
            font-size: 0;
            width: 20px;
            height: 20px;
            position: relative;
        }

        .breadcrumb-item:first-child .breadcrumb-link::before {
            content: 'üè†';
            font-size: 1rem;
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%);
        }
    }

    /* Variantes de style */
    .breadcrumb.minimal {
        background: transparent;
        border-bottom: none;
        padding: 0.5rem 0;
    }

    .breadcrumb.dark {
        background: var(--black);
    }

    .breadcrumb.dark .breadcrumb-link {
        color: var(--light-gray);
    }

    .breadcrumb.dark .breadcrumb-link:hover {
        color: var(--primary-yellow);
    }

    .breadcrumb.dark .breadcrumb-current {
        color: var(--white);
    }

    .breadcrumb.dark .breadcrumb-separator {
        color: var(--gray);
    }
</style>