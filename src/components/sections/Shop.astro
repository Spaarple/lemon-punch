---
// src/components/sections/Shop.astro
import CardProduct from '../ui/CardProduct.astro';

interface Props {
    limit?: number;
}

// 1. On récupère la prop "limit" SANS valeur par défaut
const { limit } = Astro.props;

const WOO_URL = "https://shop.lemonpunch.fr/wp-json/wc/v3/products";
const KEY = import.meta.env.WOOCOMMERCE_KEY;
const SECRET = import.meta.env.WOOCOMMERCE_SECRET;

const response = await fetch(`${WOO_URL}?consumer_key=${KEY}&consumer_secret=${SECRET}`);
const allProducts = await response.json();

// 2. Si une limite est fournie, on coupe la liste, SINON on garde tout
const productsToDisplay = limit ? allProducts.slice(0, limit) : allProducts;
---

<CardProduct />

<section class="shop-section" id="shop">
    <div class="container">
        <h2 class="section-title">Shop</h2>
        <div class="shop-grid">
            {/* On boucle sur la bonne liste de produits (limitée ou complète) */}
            {productsToDisplay.map(product => {
                // Fonction pour extraire et limiter la description
                const extractDescription = (html) => {
                    if (!html) return '';
                    const text = html.replace(/<[^>]*>/g, '').trim();
                    return text.length > 150 ? text.substring(0, 150) + '...' : text;
                };

                // Vérifier si le produit a des attributs (taille, couleur, etc.)
                const hasAttributes = product.attributes && product.attributes.length > 0;

                const productData = {
                    id: product.id,
                    slug: product.slug,
                    name: product.name,
                    price: product.price,
                    onSale: product.on_sale,
                    salePrice: product.sale_price,
                    regularPrice: product.regular_price,
                    imageSrc: product.images[0]?.src,
                    imageAlt: product.images[0]?.alt || `Image pour ${product.name}`,
                    category: product.categories[0]?.name,
                    description: extractDescription(product.short_description || product.description),
                    hasOptions: hasAttributes || product.type === 'variable'
                };
                return (
                    <product-card data-product={JSON.stringify(productData)}></product-card>
                );
            })}
        </div>
        <div class="shop-more">
            <a href="/produits/" class="btn btn-shop-more">Accéder au merch</a>
        </div>
    </div>
</section>