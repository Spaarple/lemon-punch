---
import Layout from "../../layouts/Layout.astro";

// URL de l'API WordPress pour récupérer les événements
const EVENTS_URL = "https://lemonpunch.spaarple.fr/wp-json/wp/v2/evenements?_embed&per_page=100";

let allEvents = [];
let upcomingEvents = [];
let pastEvents = [];

// Fonction pour formater la date depuis ACF
function formatEventDate(event) {
    // Utiliser le bon nom de champ ACF
    const eventDate = event.acf?.date_de_levenement || event.date;

    if (eventDate && typeof eventDate === 'string') {
        // Si c'est au format datetime "2025-10-16 20:30:00"
        if (eventDate.includes('-') && eventDate.includes(':')) {
            return new Date(eventDate);
        }
        // Si c'est au format YYYYMMDD
        else if (eventDate.length === 8 && !eventDate.includes('-')) {
            const year = eventDate.substring(0, 4);
            const month = eventDate.substring(4, 6);
            const day = eventDate.substring(6, 8);
            return new Date(year, month - 1, day);
        }
        // Autres formats de date
        else {
            return new Date(eventDate);
        }
    }
    return null;
}

// Fonction pour formater la date en français
function formatDateFrench(date) {
    if (!date) return null;

    const months = [
        'janvier', 'février', 'mars', 'avril', 'mai', 'juin',
        'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'
    ];

    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear();

    return `${day} ${month} ${year}`;
}

try {
    const res = await fetch(EVENTS_URL);
    if (res.ok) {
        const data = await res.json();

        // Filtrer et valider les événements
        allEvents = data.filter(event =>
            event &&
            event.title &&
            event.title.rendered &&
            event.slug
        ).map(event => ({
            ...event,
            eventDate: formatEventDate(event),
            formattedDate: formatDateFrench(formatEventDate(event))
        }));

        if (allEvents.length > 0) {
            const now = new Date();
            now.setHours(0, 0, 0, 0); // Début de la journée

            // Séparer les événements à venir et passés
            upcomingEvents = allEvents
                .filter(event => event.eventDate && event.eventDate >= now)
                .sort((a, b) => a.eventDate - b.eventDate); // Plus proche en premier

            pastEvents = allEvents
                .filter(event => event.eventDate && event.eventDate < now)
                .sort((a, b) => b.eventDate - a.eventDate) // Plus récent en premier
                .slice(0, 6); // Limiter à 6 événements passés
        }
    }
} catch (error) {
    console.error('Erreur lors du chargement des événements:', error);
}
---

<Layout title="Événements - LemonPunch">
    <!-- Section Header Événements -->
    <section class="events-header">
        <div class="header-background"></div>
        <div class="floating-elements">
            <div class="floating-note note-1">♪</div>
            <div class="floating-note note-2">♫</div>
            <div class="floating-note note-3">♪</div>
            <div class="floating-note note-4">♫</div>
        </div>
        <div class="header-content">
            <div class="title-container">
                <h1 class="events-title">
                    Évén<span class="title-accent">ements</span>
                </h1>
                <div class="title-underline"></div>
            </div>
            <p class="events-subtitle">Concerts, festivals et rencontres musicales</p>
        </div>
    </section>

    <!-- Section Événements à venir -->
    {upcomingEvents.length > 0 && (
        <section class="concerts-section upcoming-events">
            <div class="container">
                <h2 class="section-title">Prochains événements</h2>
                <div class="concerts-list">
                    {upcomingEvents.map((event) => {
                        // Extraire jour et mois de la date
                        const eventDate = event.eventDate;
                        const day = eventDate ? eventDate.getDate().toString().padStart(2, '0') : '';
                        const monthNames = ['JAN', 'FÉV', 'MAR', 'AVR', 'MAI', 'JUN',
                                          'JUL', 'AOÛ', 'SEP', 'OCT', 'NOV', 'DÉC'];
                        const month = eventDate ? monthNames[eventDate.getMonth()] : '';

                        return (
                            <div class="concert-card event-card">
                                <div class="concert-date">
                                    <span class="day">{day}</span>
                                    <span class="month">{month}</span>
                                </div>
                                <div class="concert-info">
                                    <h3 class="concert-venue">{event.title.rendered}</h3>
                                    {event.acf?.nom_du_lieu && (
                                        <p class="concert-city">{event.acf.nom_du_lieu}</p>
                                    )}
                                    {event.acf?.date_de_levenement && (
                                        <p class="concert-time">
                                            {new Date(event.acf.date_de_levenement).toLocaleTimeString('fr-FR', {
                                                hour: '2-digit',
                                                minute: '2-digit'
                                            })}
                                        </p>
                                    )}
                                </div>
                                <div class="concert-action">
                                    <a href={`/evenements/${event.slug}/`} class="btn btn-ticket">
                                        Détails
                                    </a>
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>
        </section>
    )}

    <!-- Section Événements passés -->
    {pastEvents.length > 0 && (
        <section class="concerts-section past-events">
            <div class="container">
                <h2 class="section-title">Événements passés</h2>
                <div class="concerts-list">
                    {pastEvents.map((event) => {
                        // Extraire jour et mois de la date
                        const eventDate = event.eventDate;
                        const day = eventDate ? eventDate.getDate().toString().padStart(2, '0') : '';
                        const monthNames = ['JAN', 'FÉV', 'MAR', 'AVR', 'MAI', 'JUN',
                                          'JUL', 'AOÛ', 'SEP', 'OCT', 'NOV', 'DÉC'];
                        const month = eventDate ? monthNames[eventDate.getMonth()] : '';

                        return (
                            <div class="concert-card event-card past">
                                <div class="concert-date past-date">
                                    <span class="day">{day}</span>
                                    <span class="month">{month}</span>
                                </div>
                                <div class="concert-info">
                                    <h3 class="concert-venue">{event.title.rendered}</h3>
                                    {event.acf?.nom_du_lieu && (
                                        <p class="concert-city">{event.acf.nom_du_lieu}</p>
                                    )}
                                    {event.acf?.date_de_levenement && (
                                        <p class="concert-time">
                                            {new Date(event.acf.date_de_levenement).toLocaleTimeString('fr-FR', {
                                                hour: '2-digit',
                                                minute: '2-digit'
                                            })}
                                        </p>
                                    )}
                                </div>
                                <div class="concert-action">
                                    <a href={`/evenements/${event.slug}/`} class="btn btn-ticket past-btn">
                                        Voir le récap
                                    </a>
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>
        </section>
    )}

    <!-- Message si aucun événement -->
    {allEvents.length === 0 && (
        <section class="no-events">
            <div class="container">
                <div class="no-events-content">
                    <i class="fas fa-calendar-alt"></i>
                    <h2>Aucun événement disponible</h2>
                    <p>Les prochains événements seront bientôt annoncés !</p>
                </div>
            </div>
        </section>
    )}
</Layout>

<style is:global>
    /* Section Header Événements */
    .events-header {
        background: linear-gradient(135deg, var(--black) 0%, #1a1a1a 50%, var(--black) 100%);
        position: relative;
        height: 60vh;
        min-height: 500px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        margin-top: 80px;
        overflow: hidden;
    }

    .header-background {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url('../../assets/images/black-bg-with-noise.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        background-attachment: fixed;
        opacity: 0.3;
        z-index: 1;
    }

    .header-background::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at center, transparent 20%, rgba(0,0,0,0.4) 70%);
        z-index: 2;
    }

    .header-content {
        position: relative;
        z-index: 3;
        max-width: 800px;
        margin: 0 auto;
    }

    .title-container {
        margin-bottom: 2rem;
        position: relative;
    }

    .events-title {
        font-size: 6rem;
        font-weight: 900;
        color: var(--white);
        margin-bottom: 1rem;
        letter-spacing: 2px;
        text-transform: uppercase;
        line-height: 1;
        position: relative;
        animation: slideInFromLeft 1s ease;
    }

    .title-accent {
        color: var(--primary-yellow);
        position: relative;
    }

    .title-underline {
        width: 120px;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-yellow), #f39c12);
        margin: 0 auto;
        border-radius: 2px;
        animation: slideInFromRight 1s ease 0.3s both;
    }

    .events-subtitle {
        font-size: 1.8rem;
        color: #cccccc;
        font-weight: 300;
        letter-spacing: 1px;
        animation: fadeInUp 1s ease 0.6s both;
        font-style: italic;
    }

    /* Éléments flottants */
    .floating-elements {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        pointer-events: none;
        z-index: 2;
    }

    .floating-note {
        position: absolute;
        color: var(--primary-yellow);
        font-size: 2rem;
        opacity: 0.3;
        animation: float 6s ease-in-out infinite;
    }

    .note-1 {
        top: 20%;
        left: 15%;
        animation-delay: 0s;
    }

    .note-2 {
        top: 30%;
        right: 20%;
        animation-delay: 1.5s;
    }

    .note-3 {
        bottom: 25%;
        left: 25%;
        animation-delay: 3s;
    }

    .note-4 {
        bottom: 35%;
        right: 15%;
        animation-delay: 4.5s;
    }

    /* Styles spécifiques pour les événements passés */
    .past-events {
        background-color: #f8f8f8;
    }

    .past-date {
        background: #6c757d !important;
        color: white !important;
    }

    .past-btn {
        background: transparent !important;
        color: var(--gray) !important;
        border-color: var(--gray) !important;
    }

    .past-btn:hover {
        background: var(--gray) !important;
        color: white !important;
        border-color: var(--gray) !important;
    }

    /* Section Aucun événement */
    .no-events {
        background: var(--white);
        padding: 100px 0;
        text-align: center;
    }

    .no-events-content {
        max-width: 500px;
        margin: 0 auto;
    }

    .no-events-content i {
        font-size: 4rem;
        color: var(--primary-yellow);
        margin-bottom: 2rem;
    }

    .no-events-content h2 {
        font-size: 2rem;
        font-weight: 900;
        color: var(--black);
        margin-bottom: 1rem;
    }

    .no-events-content p {
        font-size: 1.2rem;
        color: var(--gray);
    }

    /* Animations */
    @keyframes slideInFromLeft {
        from {
            opacity: 0;
            transform: translateX(-100px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes slideInFromRight {
        from {
            opacity: 0;
            transform: translateX(100px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes float {
        0%, 100% {
            transform: translateY(0px) rotate(0deg);
            opacity: 0.3;
        }
        25% {
            transform: translateY(-20px) rotate(5deg);
            opacity: 0.5;
        }
        50% {
            transform: translateY(-30px) rotate(-5deg);
            opacity: 0.7;
        }
        75% {
            transform: translateY(-10px) rotate(3deg);
            opacity: 0.5;
        }
    }

    /* Responsive */
    @media (max-width: 768px) {
        .events-header {
            height: 50vh;
            min-height: 400px;
        }

        .events-title {
            font-size: 4rem;
        }

        .events-subtitle {
            font-size: 1.4rem;
        }
    }

    @media (max-width: 480px) {
        .events-header {
            height: 45vh;
            min-height: 350px;
        }

        .events-title {
            font-size: 2.8rem;
        }

        .events-subtitle {
            font-size: 1.1rem;
        }
    }
</style>
