---
import Layout from "../../layouts/Layout.astro";

// 1. getStaticPaths va lister toutes les pages à créer
export async function getStaticPaths() {
    const WOO_URL = "https://lemonpunch.spaarple.fr/wp-json/wc/v3/products";
    const KEY = import.meta.env.WOOCOMMERCE_KEY;
    const SECRET = import.meta.env.WOOCOMMERCE_SECRET;

    const res = await fetch(`${WOO_URL}?consumer_key=${KEY}&consumer_secret=${SECRET}&per_page=100`);
    const products = await res.json();

    return products.map((product) => ({
        params: { slug: product.slug },
        props: { product },
    }));
}

// 2. On récupère les données du produit pour cette page spécifique
const { product } = Astro.props;

// Fonction pour convertir les noms de couleurs en codes couleurs
function getColorValue(colorName) {
    const colors = {
        'noir': '#000000', 'black': '#000000', 'blanc': '#ffffff', 'white': '#ffffff',
        'rouge': '#ff0000', 'red': '#ff0000', 'bleu': '#0000ff', 'blue': '#0000ff',
        'vert': '#008000', 'green': '#008000', 'jaune': '#ffff00', 'yellow': '#ffff00',
        'orange': '#ffa500', 'violet': '#800080', 'purple': '#800080', 'rose': '#ffc0cb',
        'pink': '#ffc0cb', 'gris': '#808080', 'gray': '#808080', 'grey': '#808080',
        'marron': '#8b4513', 'brown': '#8b4513', 'beige': '#f5f5dc', 'navy': '#000080',
        'marine': '#000080'
    };
    const colorKey = colorName.toLowerCase().trim();
    return colors[colorKey] || '#cccccc';
}

// Récupérer les variations du produit si c'est un produit variable
const WOO_URL = "https://lemonpunch.spaarple.fr/wp-json/wc/v3/products";
const KEY = import.meta.env.WOOCOMMERCE_KEY;
const SECRET = import.meta.env.WOOCOMMERCE_SECRET;

let productVariations = [];
if (product.type === 'variable') {
    try {
        const variationsRes = await fetch(`${WOO_URL}/${product.id}/variations?consumer_key=${KEY}&consumer_secret=${SECRET}&per_page=100`);
        productVariations = await variationsRes.json();
    } catch (error) {
        console.error('Erreur lors du chargement des variations:', error);
    }
}

// Récupérer les produits similaires (même catégorie)
let relatedProducts = [];
if (product.categories.length > 0) {
    const categoryId = product.categories[0].id;
    try {
        const relatedRes = await fetch(`${WOO_URL}?consumer_key=${KEY}&consumer_secret=${SECRET}&category=${categoryId}&exclude=${product.id}&per_page=4`);
        relatedProducts = await relatedRes.json();
    } catch (error) {
        console.error('Erreur lors du chargement des produits similaires:', error);
    }
}
---

<Layout title={`${product.name} - LemonPunch Merch`}>
    <nav class="breadcrumb">
        <div class="container">
            <ol class="breadcrumb-list">
                <li><a href="/">Accueil</a></li>
                <li><a href="/produits">Produits</a></li>
                <li class="current">{product.name}</li>
            </ol>
        </div>
    </nav>

    <section class="product-hero">
        <div class="container">
            <div
                    class="product-main"
                    id="product-data-container"
                    data-variations={JSON.stringify(productVariations)}
            >
                <div class="product-gallery">
                    <div class="main-image">
                        <img
                                src={product.images[0]?.src || '/placeholder.jpg'}
                                alt={product.name}
                                class="main-product-image"
                                id="mainImage"
                        />
                        {product.on_sale && (
                                <div class="sale-badge">-{Math.round(((product.regular_price - product.sale_price) / product.regular_price) * 100)}%</div>
                        )}
                    </div>
                    {product.images.length > 1 && (
                            <div class="thumbnail-gallery">
                                {product.images.map((image, index) => (
                                        <img
                                                src={image.src}
                                                alt={`${product.name} - Image ${index + 1}`}
                                                class="thumbnail"
                                                data-main-src={image.src}
                                        />
                                ))}
                            </div>
                    )}
                </div>

                <div class="product-details">
                    {product.categories && product.categories.length > 0 && (
                            <div class="product-meta">
                                {product.categories.map(category => (
                                        <span class="category-tag">{category.name}</span>
                                ))}
                            </div>
                    )}

                    <h1 class="product-title">{product.name}</h1>

                    <div class="product-price">
                        {product.type === 'variable' ? (
                                <span class="variable-price">{product.price}€</span>
                        ) : product.on_sale ? (
                                <>
                                    <span class="sale-price">{product.sale_price}€</span>
                                    <span class="regular-price">{product.regular_price}€</span>
                                </>
                        ) : (
                                <span class="current-price">{product.price}€</span>
                        )}
                    </div>

                    <div class="product-description" set:html={product.short_description || product.description} />

                    {product.attributes && product.attributes.length > 0 && (
                            <div class="product-variations">
                                {(() => {
                                    const sortedAttributes = [...product.attributes].sort((a, b) => {
                                        const aName = a.name.toLowerCase();
                                        const bName = b.name.toLowerCase();
                                        if (aName.includes('couleur') || aName.includes('color')) return -1;
                                        if (bName.includes('couleur') || bName.includes('color')) return 1;
                                        if (aName.includes('taille') || aName.includes('size')) return -1;
                                        if (bName.includes('taille') || bName.includes('size')) return 1;
                                        return 0;
                                    });

                                    return sortedAttributes.map(attr => {
                                        const attrName = attr.name.toLowerCase();
                                        const isColor = attrName.includes('couleur') || attrName.includes('color');
                                        const isSize = attrName.includes('taille') || attrName.includes('size');

                                        if (isColor) {
                                            return (
                                                    <div class="variation-group">
                                                        <label class="variation-label">Couleur:</label>
                                                        <div class="color-options">
                                                            {attr.options.map(option => (
                                                                    <button
                                                                            class="color-option"
                                                                            data-attribute={attr.name}
                                                                            data-value={option}
                                                                            title={option}
                                                                            style={`background-color: ${getColorValue(option)}`}
                                                                    />
                                                            ))}
                                                        </div>
                                                    </div>
                                            );
                                        } else if (isSize) {
                                            return (
                                                    <div class="variation-group">
                                                        <label class="variation-label">Taille:</label>
                                                        <div class="size-options">
                                                            {attr.options.map(option => (
                                                                    <button class="size-option" data-attribute={attr.name} data-value={option}>
                                                                        {option}
                                                                    </button>
                                                            ))}
                                                        </div>
                                                    </div>
                                            );
                                        } else {
                                            return (
                                                    <div class="variation-group">
                                                        <label class="variation-label">{attr.name}:</label>
                                                        <select class="variation-select" data-attribute={attr.name}>
                                                            <option value="">Sélectionner {attr.name}</option>
                                                            {attr.options.map(option => <option value={option}>{option}</option>)}
                                                        </select>
                                                    </div>
                                            );
                                        }
                                    });
                                })()}
                            </div>
                    )}

                    <div class="product-actions">
                        <div class="quantity-selector">
                            <button type="button" class="qty-btn" id="decreaseQty">-</button>
                            <input type="number" value="1" min="1" id="quantity" class="qty-input" />
                            <button type="button" class="qty-btn" id="increaseQty">+</button>
                        </div>
                        <button class="btn-add-to-cart" data-product-id={product.id}>
                            <i class="fas fa-shopping-cart"></i>
                            Ajouter au panier
                        </button>
                    </div>
                    <div class="selection-message" id="selectionMessage">
                        Veuillez sélectionner toutes les options avant d'ajouter au panier.
                    </div>
                    <div class="product-info-extra">
                        <div class="info-item"><i class="fas fa-truck"></i><span>Livraison gratuite dès 50€</span></div>
                        <div class="info-item"><i class="fas fa-shield-alt"></i><span>Paiement sécurisé</span></div>
                        <div class="info-item"><i class="fas fa-undo"></i><span>Retours sous 30 jours</span></div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="product-tabs">
        <div class="container">
            <div class="tabs-navigation">
                <button class="tab-btn active" data-tab="description">Description</button>
                <button class="tab-btn" data-tab="details">Détails</button>
                <button class="tab-btn" data-tab="reviews">Avis</button>
            </div>
            <div class="tabs-content">
                <div class="tab-panel active" id="description"><div class="content" set:html={product.description} /></div>
                <div class="tab-panel" id="details">
                    <div class="details-grid">
                        <div class="detail-item"><strong>SKU:</strong><span>{product.sku || 'N/A'}</span></div>
                        <div class="detail-item"><strong>Catégories:</strong><span>{product.categories.map(cat => cat.name).join(', ')}</span></div>
                        {product.tags && product.tags.length > 0 && <div class="detail-item"><strong>Tags:</strong><span>{product.tags.map(tag => tag.name).join(', ')}</span></div>}
                        <div class="detail-item"><strong>Poids:</strong><span>{product.weight ? `${product.weight} kg` : 'N/A'}</span></div>
                    </div>
                </div>
                <div class="tab-panel" id="reviews">
                    <div class="reviews-placeholder"><p>Les avis clients seront bientôt disponibles.</p><div class="rating-display"><div class="stars"><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i></div><span>5.0 sur 5 (basé sur les retours de nos fans)</span></div></div>
                </div>
            </div>
        </div>
    </section>

    {relatedProducts.length > 0 && (
            <section class="related-products">
                <div class="container">
                    <h2 class="section-title">Produits similaires</h2>
                    <div class="related-grid">
                        {relatedProducts.map(relatedProduct => (
                                <div class="related-card">
                                    <a href={`/produits/${relatedProduct.slug}/`} class="related-link">
                                        <div class="related-image"><img src={relatedProduct.images[0]?.src || '/placeholder.jpg'} alt={relatedProduct.name}/></div>
                                        <div class="related-info"><h3>{relatedProduct.name}</h3><p class="related-price">{relatedProduct.price}€</p></div>
                                    </a>
                                </div>
                        ))}
                    </div>
                </div>
            </section>
    )}
</Layout>

<style is:global>
        /* Breadcrumb */
    .breadcrumb {
        background: var(--light-gray);
        padding: 1rem 0;
        margin-top: 80px;
    }

    .breadcrumb-list {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        list-style: none;
        margin: 0;
        padding: 0;
        font-size: 0.9rem;
    }

    .breadcrumb-list li::after {
        content: '>';
        margin-left: 0.5rem;
        color: var(--gray);
    }

    .breadcrumb-list li:last-child::after {
        display: none;
    }

    .breadcrumb-list a {
        color: var(--gray);
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .breadcrumb-list a:hover {
        color: var(--primary-yellow);
    }

    .breadcrumb-list .current {
        color: var(--black);
        font-weight: 600;
    }

    /* Product Hero */
    .product-hero {
        padding: 3rem 0;
        background: var(--white);
        background-image: url('../../assets/images/white-bg-with-noise.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        background-blend-mode: multiply;
    }

    .product-main {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 4rem;
        align-items: start;
    }

    /* Product Gallery */
    .product-gallery {
        position: sticky;
        top: 100px;
    }

    .main-image {
        position: relative;
        margin-bottom: 1rem;
        background: var(--white);
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 10px 30px var(--shadow);
    }

    .main-product-image {
        width: 100%;
        height: 500px;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .main-product-image:hover {
        transform: scale(1.05);
    }

    .sale-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: var(--primary-yellow);
        color: var(--black);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 700;
        font-size: 0.9rem;
        z-index: 2;
    }

    .thumbnail-gallery {
        display: flex;
        gap: 0.5rem;
        overflow-x: auto;
    }

    .thumbnail {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .thumbnail:hover,
    .thumbnail.active {
        border-color: var(--primary-yellow);
        transform: scale(1.1);
    }

    /* Product Details */
    .product-details {
        padding: 1rem 0;
    }

    .product-meta {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .category-tag {
        background: var(--primary-yellow);
        color: var(--black);
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .product-title {
        font-size: 2.5rem;
        font-weight: 900;
        color: var(--black);
        margin-bottom: 1.5rem;
        line-height: 1.2;
    }

    .product-price {
        margin-bottom: 2rem;
    }

    .current-price,
    .sale-price,
    .variable-price {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-yellow);
    }

    .regular-price {
        font-size: 1.5rem;
        color: var(--gray);
        text-decoration: line-through;
        margin-left: 1rem;
    }

    .product-description {
        margin-bottom: 2rem;
        line-height: 1.6;
        color: var(--gray);
    }

    .product-attributes {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: var(--light-gray);
        border-radius: 10px;
    }

    .product-attributes h3 {
        margin-bottom: 1rem;
        color: var(--black);
    }

    .attributes-list {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .attributes-list li {
        padding: 0.5rem 0;
        border-bottom: 1px solid #eee;
    }

    .attributes-list li:last-child {
        border-bottom: none;
    }

    /* Product Variations */
    .product-variations {
        margin-bottom: 2rem;
    }

    .variation-group {
        margin-bottom: 1.5rem;
    }

    .variation-label {
        display: block;
        font-weight: 600;
        color: var(--black);
        margin-bottom: 0.8rem;
        font-size: 1.1rem;
    }

    /* Color Options */
    .color-options {
        display: flex;
        gap: 0.8rem;
        flex-wrap: wrap;
    }

    .color-option {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        border: 3px solid transparent;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .color-option:hover {
        transform: scale(1.1);
        border-color: var(--primary-yellow);
    }

    .color-option.selected {
        border-color: var(--black);
        transform: scale(1.1);
    }

    .color-option[style*="ffffff"] {
        border: 3px solid #ddd;
    }

    .color-option[style*="ffffff"]:hover,
    .color-option[style*="ffffff"].selected {
        border-color: var(--primary-yellow);
    }

    .color-name {
        position: absolute;
        bottom: -25px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 0.8rem;
        color: var(--gray);
        white-space: nowrap;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .color-option:hover .color-name {
        opacity: 1;
    }

    /* Size Options */
    .size-options {
        display: flex;
        gap: 0.8rem;
        flex-wrap: wrap;
    }

    .size-option {
        background: var(--white);
        border: 2px solid var(--gray);
        color: var(--black);
        padding: 10px 16px;
        border-radius: 5px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 50px;
        text-align: center;
    }

    .size-option:hover {
        border-color: var(--primary-yellow);
        background: var(--primary-yellow);
        transform: translateY(-2px);
    }

    .size-option.selected {
        background: var(--black);
        border-color: var(--black);
        color: var(--white);
    }

    .size-option.selected:hover {
        background: var(--primary-yellow);
        border-color: var(--primary-yellow);
        color: var(--black);
    }

    /* Variation Select */
    .variation-select {
        width: 100%;
        background: var(--white);
        border: 2px solid var(--gray);
        padding: 12px 15px;
        border-radius: 5px;
        font-weight: 600;
        color: var(--black);
        cursor: pointer;
        transition: border-color 0.3s ease;
    }

    .variation-select:focus {
        border-color: var(--primary-yellow);
        outline: none;
    }

    /* Selection Required Message */
    .selection-message {
        margin-top: 1rem;
        padding: 1rem;
        background: #ffeaa7;
        border-left: 4px solid var(--primary-yellow);
        border-radius: 5px;
        color: var(--black);
        font-weight: 600;
        display: none;
    }

    .selection-message.show {
        display: block;
    }

    /* Product Actions */
    .product-actions {
        display: flex;
        gap: 1rem;
        align-items: center;
        margin-bottom: 2rem;
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        border: 2px solid var(--gray);
        border-radius: 5px;
        overflow: hidden;
    }

    .qty-btn {
        background: var(--white);
        border: none;
        width: 40px;
        height: 40px;
        cursor: pointer;
        font-weight: 700;
        transition: background 0.3s ease;
    }

    .qty-btn:hover {
        background: var(--primary-yellow);
    }

    .qty-input {
        border: none;
        width: 60px;
        height: 40px;
        text-align: center;
        font-weight: 600;
    }

    .btn-add-to-cart {
        background: var(--primary-yellow);
        color: var(--black);
        border: none;
        padding: 12px 30px;
        border-radius: 5px;
        font-weight: 700;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .btn-add-to-cart:hover {
        background: var(--black);
        color: var(--primary-yellow);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(244, 208, 63, 0.4);
    }

    /* Product Info Extra */
    .product-info-extra {
        border-top: 1px solid #eee;
        padding-top: 2rem;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
        color: var(--gray);
        font-size: 0.9rem;
    }

    .info-item i {
        color: var(--primary-yellow);
        width: 20px;
    }

    /* Product Tabs */
    .product-tabs {
        padding: 4rem 0;
        background: var(--black);
        background-image: url('../../assets/images/black-bg-with-noise.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        background-blend-mode: multiply;
    }

    .tabs-navigation {
        display: flex;
        gap: 1rem;
        margin-bottom: 3rem;
        justify-content: center;
    }

    .tab-btn {
        background: transparent;
        border: 2px solid var(--gray);
        color: var(--white);
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .tab-btn:hover,
    .tab-btn.active {
        background: var(--primary-yellow);
        border-color: var(--primary-yellow);
        color: var(--black);
    }

    .tabs-content {
        max-width: 800px;
        margin: 0 auto;
    }

    .tab-panel {
        display: none;
        background: var(--white);
        padding: 2rem;
        border-radius: 10px;
        color: var(--black);
    }

    .tab-panel.active {
        display: block;
    }

    .details-grid {
        display: grid;
        gap: 1rem;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        padding: 1rem 0;
        border-bottom: 1px solid #eee;
    }

    .detail-item:last-child {
        border-bottom: none;
    }

    /* Reviews */
    .reviews-placeholder {
        text-align: center;
        padding: 2rem 0;
    }

    .rating-display {
        margin-top: 1rem;
    }

    .stars {
        color: var(--primary-yellow);
        margin-bottom: 0.5rem;
    }

    .stars i {
        margin: 0 2px;
    }

    /* Related Products */
    .related-products {
        padding: 4rem 0;
        background: var(--white);
        background-image: url('../../assets/images/white-bg-with-noise.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        background-blend-mode: multiply;
    }

    .section-title {
        text-align: center;
        font-size: 2.5rem;
        font-weight: 900;
        color: var(--black);
        margin-bottom: 3rem;
        position: relative;
    }

    .section-title::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 60px;
        height: 4px;
        background: var(--primary-yellow);
    }

    .related-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 2rem;
    }

    .related-card {
        background: var(--white);
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 10px 30px var(--shadow);
        transition: transform 0.3s ease;
    }

    .related-card:hover {
        transform: translateY(-5px);
    }

    .related-image {
        overflow: hidden;
    }

    .related-image img {
        width: 100%;
        height: 200px;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .related-card:hover .related-image img {
        transform: scale(1.1);
    }

    .related-info {
        padding: 1.5rem;
    }

    .related-info h3 {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--black);
    }

    .related-price {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--primary-yellow);
    }

    .related-link {
        text-decoration: none;
        color: inherit;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .product-main {
            grid-template-columns: 1fr;
            gap: 2rem;
        }

        .product-gallery {
            position: static;
        }

        .main-product-image {
            height: 300px;
        }

        .product-title {
            font-size: 2rem;
        }

        .product-actions {
            flex-direction: column;
            align-items: stretch;
        }

        .tabs-navigation {
            flex-direction: column;
            align-items: center;
        }

        .related-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
    }

    @media (max-width: 480px) {
        .related-grid {
            grid-template-columns: 1fr;
        }

        .product-actions {
            gap: 1rem;
        }

        .quantity-selector {
            justify-self: center;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let selectedVariations = {};

        // CORRIGÉ 1: Lire les données des variations depuis l'attribut data-
        const dataContainer = document.getElementById('product-data-container');
        const productVariationsData = JSON.parse(dataContainer.dataset.variations || '[]');
        console.log('Données des variations chargées:', productVariationsData);

        // --- LOGIQUE DE SÉLECTION DES VARIATIONS (INCHANGÉE) ---
        function updateSelection(element) {
            const attribute = element.dataset.attribute;
            const value = element.dataset.value || element.value;
            selectedVariations[attribute] = value;
            console.log('Sélections actuelles:', selectedVariations);
            hideSelectionMessage();
        }

        const colorOptions = document.querySelectorAll('.color-option');
        colorOptions.forEach(option => {
            option.addEventListener('click', function() {
                colorOptions.forEach(c => c.classList.remove('selected'));
                this.classList.add('selected');
                updateSelection(this);
            });
        });

        const sizeOptions = document.querySelectorAll('.size-option');
        sizeOptions.forEach(option => {
            option.addEventListener('click', function() {
                sizeOptions.forEach(s => s.classList.remove('selected'));
                this.classList.add('selected');
                updateSelection(this);
            });
        });

        const variationSelects = document.querySelectorAll('.variation-select');
        variationSelects.forEach(select => {
            select.addEventListener('change', function() {
                updateSelection(this);
            });
        });

        // --- FONCTIONS UTILITAIRES (INCHANGÉES) ---
        function hideSelectionMessage() { document.getElementById('selectionMessage').classList.remove('show'); }
        function showSelectionMessage() {
            const message = document.getElementById('selectionMessage');
            message.classList.add('show');
            setTimeout(() => message.classList.remove('show'), 4000);
        }

        function validateSelections() {
            const requiredCount = document.querySelectorAll('.variation-group').length;
            const selectedCount = Object.keys(selectedVariations).length;
            const isValid = requiredCount === selectedCount;
            console.log(`Validation: ${selectedCount} / ${requiredCount} options. Valide: ${isValid}`);
            return isValid;
        }

        function findVariationId() {
            if (!productVariationsData || productVariationsData.length === 0) return null;
            const foundVariation = productVariationsData.find(variation => {
                return variation.attributes.every(attr => {
                    const selectedValue = selectedVariations[attr.name];
                    return selectedValue && selectedValue.toLowerCase() === attr.option.toLowerCase();
                });
            });
            return foundVariation ? foundVariation.id : null;
        }

        // --- ADD TO CART & UI LOGIC (INCHANGÉ) ---
        const thumbnails = document.querySelectorAll('.thumbnail');
        const mainImage = document.getElementById('mainImage');
        thumbnails.forEach(thumb => {
            thumb.addEventListener('click', function() {
                mainImage.src = this.dataset.mainSrc;
                thumbnails.forEach(t => t.classList.remove('active'));
                this.classList.add('active');
            });
        });
        if (thumbnails.length > 0) thumbnails[0].classList.add('active');

        const decreaseBtn = document.getElementById('decreaseQty');
        const increaseBtn = document.getElementById('increaseQty');
        const quantityInput = document.getElementById('quantity');
        decreaseBtn?.addEventListener('click', () => { if (parseInt(quantityInput.value) > 1) quantityInput.value--; });
        increaseBtn?.addEventListener('click', () => { quantityInput.value = parseInt(quantityInput.value) + 1; });

        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabPanels = document.querySelectorAll('.tab-panel');
        tabBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                const tabId = this.dataset.tab;
                tabBtns.forEach(b => b.classList.remove('active'));
                tabPanels.forEach(p => p.classList.remove('active'));
                this.classList.add('active');
                document.getElementById(tabId).classList.add('active');
            });
        });

        // --- CORRIGÉ 2 : LOGIQUE D'AJOUT AU PANIER ENTIÈREMENT REVUE ---
        const addToCartBtn = document.querySelector('.btn-add-to-cart');
        addToCartBtn?.addEventListener('click', function() {
            const hasVariations = document.querySelectorAll('.variation-group').length > 0;
            const productId = this.dataset.productId;
            const quantity = quantityInput.value;

            // Si c'est un produit simple
            if (!hasVariations) {
                const simpleUrl = `https://lemonpunch.spaarple.fr/panier/?add-to-cart=${productId}&quantity=${quantity}`;
                window.location.href = simpleUrl;
                return;
            }

            // Si c'est un produit variable, valider les sélections
            if (!validateSelections()) {
                showSelectionMessage();
                return;
            }

            const variationId = findVariationId();

            if (!variationId) {
                console.error("Aucune variation correspondante trouvée.");
                alert("Cette combinaison d'options n'est pas disponible. Veuillez en essayer une autre.");
                return;
            }

            // Animation
            this.innerHTML = '<i class="fas fa-shopping-cart"></i> Ajout en cours...';
            this.disabled = true;

            // Construire l'URL GET (méthode fiable)
            let addToCartUrl = `https://lemonpunch.spaarple.fr/panier/?add-to-cart=${productId}&quantity=${quantity}&variation_id=${variationId}`;

            Object.keys(selectedVariations).forEach(attrName => {
                const attrSlug = attrName.toLowerCase().replace(/\s+/g, '-');
                const attrValue = selectedVariations[attrName];
                addToCartUrl += `&attribute_pa_${attrSlug}=${attrValue}`;
            });

            console.log("Redirection vers:", addToCartUrl);

            setTimeout(() => {
                window.location.href = addToCartUrl;
            }, 500);
        });
    });
</script>